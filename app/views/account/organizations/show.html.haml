#organization.derivationRight
  .row
    .col-md-12
      .card
        .card-header
          %h3 Paramètres
        .card-body
          %ul.nav.nav-tabs
            %li.nav-item
              %a{ class: "nav-link #{(params[:tab] == 'information' || params[:tab].blank?) ? 'active' : ''}", href: '#information', data: { toggle: 'tab' } } Information
            -if @organization.is_active
              - unless @organization.specific_mission
                %li.nav-item
                  %a{ class: "nav-link #{(params[:tab] == 'file_naming_policy') ? 'active' : ''}", href: '#file_naming_policy', data: { toggle: 'tab' } } Charte de nommage PDF
              %li.nav-item
                %a{ class: "nav-link #{(params[:tab] == 'addresses') ? 'active' : ''}", href: '#addresses', data: { toggle: 'tab' } } Adresses
              - unless @organization.specific_mission
                %li.nav-item
                  %a{ class: "nav-link #{(params[:tab] == 'period_options') ? 'active' : ''}", href: '#period_options', data: { toggle: 'tab' } } Option téléversement
                %li.nav-item
                  %a{ class: "nav-link #{(params[:tab] == 'reminder_emails') ? 'active' : ''}", href: '#reminder_emails', data: { toggle: 'tab' } } Emails de rappels
                %li.nav-item
                  %a{ class: "nav-link #{(params[:tab] == 'knowings') ? 'active' : ''}", href: '#knowings', data: { toggle: 'tab' } } Knowings
                %li.nav-item
                  %a{ class: "nav-link #{(params[:tab] == 'mcf') ? 'active' : ''}", href: '#mcf', data: { toggle: 'tab' } } My Company Files
                %li.nav-item
                  %a{ class: "nav-link #{(params[:tab] == 'ftp') ? 'active' : ''}", href: '#ftp', data: { toggle: 'tab' } } Import/Export FTP
              %li.nav-item
                %a{ class: "nav-link #{(params[:tab] == 'sftp') ? 'active' : ''}", href: '#sftp', data: { toggle: 'tab' } } Import/Export SFTP
            - unless @organization.specific_mission
              %li.nav-item.dropdown
                %a.dropdown-toggle{ class: "nav-link #{(Interfaces::Software::Configuration::SOFTWARES.include? params[:tab]) ? 'active' : ''}", href: '#', data: {toggle: "dropdown"} } Logiciels comptables / export csv
                %ul.dropdown-menu{ style: "min-width: 195px" }
                  %li
                    %a{ class: "dropdown-item #{(params[:tab] == 'ibiza') ? 'active' : ''}", href: '#ibiza', data: { toggle: 'tab' } }
                      .float-left iBiza
                      - if @organization.try(:ibiza).try(:used?)
                        = glyphicon('check', { class: 'float-right' })
                  %li
                    %a{ class: "dropdown-item #{(params[:tab] == 'exact_online') ? 'active' : ''}", href: '#exact_online', data: { toggle: 'tab' } }
                      .float-left Exact Online
                      - if @organization.try(:exact_online).try(:used?)
                        = glyphicon('check', { class: 'float-right' })
                  %li
                    %a{ class: "dropdown-item #{(params[:tab] == 'my_unisoft') ? 'active' : ''}", href: '#my_unisoft', data: { toggle: 'tab' } }
                      .float-left My Unisoft
                      - if @organization.try(:my_unisoft).try(:used?)
                        = glyphicon('check', { class: 'float-right' })
                  %li
                    %a{ class: "dropdown-item #{(params[:tab] == 'coala') ?  'active' : ''}", href: '#coala', data: { toggle: 'tab' } }
                      .float-left Coala
                      - if @organization.try(:coala).try(:used?)
                        = glyphicon('check', { class: 'float-right' })
                  %li
                    %a{ class: "dropdown-item #{(params[:tab] == 'quadratus') ? 'active' : ''}", href: '#quadratus', data: { toggle: 'tab' } }
                      .float-left Quadratus
                      - if @organization.try(:quadratus).try(:used?)
                        = glyphicon('check', { class: 'float-right' })
                  %li
                    %a{ class: "dropdown-item #{(params[:tab] == 'cegid') ? 'active' : ''}", href: '#cegid', data: { toggle: 'tab' } }
                      .float-left Cegid
                      - if @organization.try(:cegid).try(:used?)
                        = glyphicon('check', { class: 'float-right' })
                  %li
                    %a{ class: "dropdown-item #{(params[:tab] == 'fec_agiris') ? 'active' : ''}", href: '#fec_agiris', data: { toggle: 'tab' } }
                      .float-left Fec Agiris
                      - if @organization.try(:fec_agiris).try(:used?)
                        = glyphicon('check', { class: 'float-right' })
                  %li
                    %a{ class: "dropdown-item #{(params[:tab] == 'csv_descriptor') ? 'active' : ''}", href: '#csv_descriptor', data: { toggle: 'tab' } }
                      .float-left Autre (format d'export .csv)
                      - if @organization.try(:csv_descriptor).try(:used?)
                        = glyphicon('check', { class: 'float-right' })
            - if @user.leader? && !@organization.specific_mission
              %li.nav-item
                %a{ class: "nav-link #{(params[:tab] == 'payments') ? 'active' : ''}", href: '#payments', data: { toggle: 'tab' } } Mode de paiement
            - if @user.is_admin && !@organization.specific_mission
              %li.nav-item
                %a{ class: "nav-link #{(params[:tab] == 'file_sending_kit') ? 'active' : ''}", href: '#file_sending_kit', data: { toggle: 'tab' } } Kit d'envoi de documents
              %li.nav-item
                %a{ class: "nav-link #{(params[:tab] == 'subscription') ? 'active' : ''}", href: '#subscription', data: { toggle: 'tab' } } Abonnement

          .tab-content.box.border-top-0.bg-light
            #information.tab-pane.fade{ class: ('active show' if params[:tab] == 'information' || params[:tab].blank?) }
              .row
                .col-md-8
                  %table.table.table-condensed.table-striped
                    %tr
                      %th= t('activerecord.models.organization.attributes.name')
                      %td= @organization.name
                    %tr
                      %th= t('activerecord.models.organization.attributes.code')
                      %td= @organization.code
                    %tr
                      %th= t('activerecord.models.organization.attributes.leaders')
                      %td
                        - @organization.admin_members.each do |admin_member|
                          = link_to admin_member.info, account_organization_collaborator_path(@organization, admin_member)
                          %br
                    - unless @organization.specific_mission
                      %tr
                        %th= t('activerecord.models.organization.attributes.is_detail_authorized')
                        %td= @organization.is_detail_authorized ? t('yes_value') : t('no_value')
                      %tr
                        %th= t('activerecord.models.organization.attributes.is_pre_assignment_date_computed')
                        %td= @organization.is_pre_assignment_date_computed ? 'Date de la période iDocus' : 'Date d’origine'
                      %tr
                        %th= t('activerecord.models.organization.attributes.is_operation_processing_forced')
                        %td= @organization.is_operation_processing_forced ? t('yes_value') : t('no_value')
                      %tr
                        %th= t('activerecord.models.organization.attributes.is_operation_value_date_needed')
                        %td= @organization.is_operation_value_date_needed ? t('yes_value') : t('no_value')
                      %tr
                        %th= t('activerecord.models.organization.attributes.preseizure_date_option')
                        %td= t("activerecord.models.user_options.attributes.#{@organization.get_preseizure_date_option}")
                      %tr
                        %th= t('activerecord.models.organization.attributes.is_duplicate_blocker_activated')
                        %td= @organization.is_duplicate_blocker_activated ? t('yes_value') : t('no_value')
                    %tr
                      %th= t('activerecord.models.organization.attributes.invoice_mails')
                      %td= @organization.invoice_mails || '-'
                    - if @user.is_admin && !@organization.specific_mission
                      %tr
                        %th= t('activerecord.models.organization.attributes.subject_to_vat')
                        %td= @organization.subject_to_vat ? t('yes_value') : t('no_value')
                    - if @user.is_admin
                      %tr
                        %th= t('activerecord.models.organization.attributes.specific_mission')
                        %td= @organization.specific_mission ? t('yes_value') : t('no_value')
                .col-md-4
                  %table.table.table-condensed.table-striped
                    %tr
                      %th= t('activerecord.models.organization.attributes.collaborators_count')
                      - if @user.leader?
                        %td= link_to @organization.collaborators.count, account_organization_collaborators_path(@organization)
                      - else
                        %td= @organization.collaborators.count
                    %tr
                      %th= t('activerecord.models.organization.attributes.customers_count')
                      %td= link_to @organization.customers.count, account_organization_customers_path(@organization)
                    %tr
                      %th Nombre de clients actifs
                      %td= @organization.customers.active.count
              - if @user.leader?
                = link_to t('actions.edit'), edit_account_organization_path(@organization), class: 'btn btn-primary'
            #file_naming_policy.tab-pane.fade{ class: ('active show' if params[:tab] == 'file_naming_policy') }
              %p Configuration actuelle du nom de vos fichiers en sortie vers les stockages externes.
              %table.table.table-condensed.table-striped
                %tbody
                  %tr
                    %th= t('activerecord.models.file_naming_policy.attributes.scope')
                    %td
                      - if @organization.foc_file_naming_policy.scope == 'organization'
                        collaborateurs et clients
                      - else
                        collaborateurs uniquement
                  %tr
                    %th Exemple
                    %td= CustomUtils.customize_file_name(@organization.foc_file_naming_policy, {'user_code' => 'TS%00001', 'user_company' => 'iDocus', 'journal' => 'AC', 'period' => '201501', 'piece_number' => '001', 'third_party' => 'Google', 'invoice_number' => '001002', 'invoice_date' => '2015-01-02', 'extension' => '.pdf'})
              - if @user.leader?
                = link_to t('actions.edit'), edit_account_organization_file_naming_policy_path(@organization), class: 'btn btn-primary'
            #addresses.tab-pane.fade{ class: ('active show' if params[:tab] == 'addresses') }
              .row.margin1bottom
                .col-md-4= render partial: 'account/organization_addresses/address', locals: { address: @organization.billing_address,  single: true, type: 'billing' }
                .col-md-4= render partial: 'account/organization_addresses/address', locals: { address: @organization.paper_return_address, single: true, type: 'paper_return' }
                .col-md-4= render partial: 'account/organization_addresses/address', locals: { address: @organization.paper_set_shipping_address, single: true, type: 'paper_set_shipping' }
              .row
                .col-md-12.aligncenter
                  = link_to 'Configurer', account_organization_addresses_path(@organization), class: 'btn btn-primary'
            #period_options.tab-pane.fade{ class: ('active show' if params[:tab] == 'period_options') }
              %table.table.table-condensed.table-striped
                %tbody
                  %tr
                    %th= t('activerecord.models.organization.attributes.authd_prev_period')
                    %td= @organization.authd_prev_period
                  %tr
                    %th= t('activerecord.models.organization.attributes.auth_prev_period_until_day')
                    %td= @organization.auth_prev_period_until_day
                  - if @user.is_admin
                    %tr
                      %th= t('activerecord.models.organization.attributes.auth_prev_period_until_month')
                      %td= @organization.auth_prev_period_until_month
              - if @user.leader?
                = link_to t('actions.edit'), edit_account_organization_period_options_path(@organization), class: 'btn btn-primary'
                - if @user.is_admin
                  = link_to 'Propager', select_propagation_options_account_organization_period_options_path(@organization), class: 'btn btn-primary'
            #knowings.tab-pane.fade{ class: ('active show' if params[:tab] == 'knowings') }
              - if @organization.knowings
                %table.table.table-condensed.table-striped
                  %tbody
                    %tr
                      %th= t('activerecord.models.knowings.attributes.is_active')
                      %td= @organization.knowings.is_active ? t('yes_value') : t('no_value')
                    %tr
                      %th= t('activerecord.models.knowings.attributes.state')
                      %td= Knowings.state_machine.states[@organization.knowings.state].human_name if @organization.knowings && @organization.knowings.state
                    %tr
                      %th= t('activerecord.models.knowings.attributes.url')
                      %td= @organization.knowings.url
                    %tr
                      %th= t('activerecord.models.knowings.attributes.pole_name')
                      %td= @organization.knowings.pole_name
                    %tr
                      %th= t('activerecord.models.knowings.attributes.is_third_party_included')
                      %td= @organization.knowings.is_third_party_included ? t('yes_value') : t('no_value')
              - if @user.leader?
                - if @organization.knowings
                  = link_to t('actions.edit'), edit_account_organization_knowings_path(@organization), class: 'btn btn-primary'
                - else
                  = link_to 'Configurer', new_account_organization_knowings_path(@organization), class: 'btn btn-primary'
            #ftp.tab-pane.fade{ class: ('active show' if params[:tab] == 'ftp') }
              %table.table.table-condensed.table-striped
                %tbody
                  %tr
                    %th Etat
                    %td
                      - if @organization.ftp.try(:configured?)
                        %span.badge.badge-success.fs-origin OK
                      - else
                        %span.badge.badge-secondary.fs-origin Non configuré
                  %tr
                    %th Hôte
                    %td= @organization.ftp.try(:host) || 'ftp://ftp.example.com'
                  %tr
                    %th Identifiant
                    %td= @organization.ftp.try(:login) || 'login'
                  %tr
                    %th Chemin racine d'import et de livraison
                    %td= @organization.ftp.try(:root_path) || '/'
                  %tr
                    %th Chemin d'import
                    %td INPUT/CODE - JOURNAL (SOCIÉTÉ)
                  %tr
                    %th Chemin de livraison
                    %td= @organization.ftp.try(:path) || 'OUTPUT/:code/:year:month/:account_book/'
                  - if @organization.ftp.try(:error_message).present?
                    %tr
                      %th Dérnière message d'erreur rencontré
                      %td
                        %span.badge.badge-danger.fs-origin.text-white
                          le #{@organization.ftp.error_fetched_at.strftime("%d-%m-%Y %H:%M:%S")} :
                        %span
                          = @organization.ftp.error_message
              - if @user.leader?
                = link_to 'Configurer', edit_account_organization_ftps_path(@organization), class: 'btn btn-primary'
                - if @organization.ftp.try(:configured?)
                  = link_to 'Récupérer maintenant', fetch_now_account_organization_ftps_path(@organization), class: 'btn btn-secondary', method: :post, data: { confirm: 'Êtes-vous sûr de vouloir récupérer maintenant ?' }
                  = link_to 'Réinitialiser mes paramètres', account_organization_ftps_path(@organization), class: 'btn btn-danger', method: :delete, data: { confirm: 'Êtes-vous sûr de vouloir supprimer vos paramètres FTP ?' }
            #sftp.tab-pane.fade{ class: ('active show' if params[:tab] == 'sftp') }
              %table.table.table-condensed.table-striped
                %tbody
                  %tr
                    %th Etat
                    %td
                      - if @organization.sftp.try(:configured?)
                        %span.badge.badge-success.fs-origin OK
                      - else
                        %span.badge.badge-secondary.fs-origin Non configuré
                  %tr
                    %th Hôte
                    %td= @organization.sftp.try(:host) || 'sftp://sftp.example.com'
                  %tr
                    %th Identifiant
                    %td= @organization.sftp.try(:login) || 'login'
                  %tr
                    %th Chemin racine d'import et de livraison
                    %td= @organization.sftp.try(:root_path) || '/'
                  %tr
                    %th Chemin d'import
                    %td INPUT/CODE - JOURNAL (SOCIÉTÉ)
                  %tr
                    %th Chemin de livraison
                    %td= @organization.sftp.try(:path) || 'OUTPUT/:code/:year:month/:account_book/'
                  - if @organization.sftp.try(:error_message).present?
                    %tr
                      %th Dérnière message d'erreur rencontré
                      %td
                        %span.badge.badge-danger.fs-origin.text-white
                          le #{@organization.sftp.error_fetched_at.strftime("%d-%m-%Y %H:%M:%S")} :
                        %span
                          = @organization.sftp.error_message

              - if @user.leader?
                = link_to 'Configurer', edit_account_organization_sftps_path(@organization), class: 'btn btn-primary'
                - if @organization.sftp.try(:configured?)
                  = link_to 'Récupérer maintenant', fetch_now_account_organization_sftps_path(@organization), class: 'btn btn-secondary', method: :post, data: { confirm: 'Êtes-vous sûr de vouloir récupérer maintenant ?' }
                  = link_to 'Réinitialiser mes paramètres', account_organization_sftps_path(@organization), class: 'btn btn-danger', method: :delete, data: { confirm: 'Êtes-vous sûr de vouloir supprimer vos paramètres FTP ?' }
            #mcf.clearfix.tab-pane.fade{ class: ('active show' if params[:tab] == 'mcf') }
              %table.table.table-condensed.table-striped
                %tbody
                  %tr
                    %th Statut de la liaison
                    %td
                      - if @organization.mcf_settings.try(:access_token).present?
                        %span.badge.badge-success OK
                      - else
                        %span.badge.badge-default Non configuré
                  - if @organization.mcf_settings.try(:access_token).present?
                    %tr
                      %th Livraison activé ?
                      %td
                        - if @organization.mcf_settings.try(:is_delivery_activated)
                          %span.badge.badge-success= t('yes_value')
                        - else
                          %span.badge.badge-important= t('no_value')
                  %tr
                    %th Chemin de livraison
                    %td= @organization.mcf_settings.try(:delivery_path_pattern) || McfSettings.new.delivery_path_pattern
              - if @organization.mcf_settings.try(:access_token).present?
                = link_to 'Supprimer mes paramètres', account_organization_mcf_settings_path(@organization), class: 'btn btn-danger', method: :delete, data: { confirm: 'Êtes-vous sûr de vouloir supprimer vos paramètres pour My Company Files ?' }
                = link_to 'Editer', edit_account_organization_mcf_settings_path(@organization), class: 'btn btn-primary'
              - else
                = link_to 'Configurer la liaison', authorize_account_organization_mcf_settings_path(@organization), class: 'btn btn-primary', method: :post
            #ibiza.tab-pane.fade{ class: ('active show' if params[:tab] == 'ibiza') }
              .aligncenter
                %h4.margin2bottom Configuration Ibiza
              %table.table.table-condensed.table-striped
                %tbody
                  %tr
                    %th= t('activerecord.models.software_ibiza.attributes.access_token')
                    %td
                      %span{ class: "fs-origin badge #{ibiza_state_label(@organization.ibiza.try(:state))}" }= ibiza_state(@organization.ibiza.try(:state))
                  %tr
                    %th= t('activerecord.models.software_ibiza.attributes.access_token_2')
                    %td
                      %span{ class: "fs-origin badge #{ibiza_state_label(@organization.ibiza.try(:state_2))}" }= ibiza_state(@organization.ibiza.try(:state_2))
                  %tr
                    %th= t('activerecord.models.software_ibiza.attributes.is_auto_deliver')
                    %td= @organization.ibiza.try(:auto_deliver?) ? t('yes_value') : t('no_value')
                  %tr
                    %th= t('activerecord.models.software_ibiza.attributes.is_analysis_activated')
                    %td= @organization.ibiza.try(:compta_analysis_activated?) ? t('yes_value') : t('no_value')
                  - if @organization.ibiza.try(:compta_analysis_activated?)
                    %tr
                      %th= t('activerecord.models.software_ibiza.attributes.is_analysis_to_validate')
                      %td= @organization.ibiza.try(:analysis_to_validate?) ? t('yes_value') : t('no_value')
              - if @organization.ibiza
                .card.margin1bottom
                  .card-header
                    %h4 Format de nom de la pièce iDocus dans iBiza (par défaut: colonne "Pièce" dans iBiza)
                  .card-body
                    %table.table.table-condensed.table-striped
                      %thead
                        %tr.bg-brown.text-white
                          %th.name.border-top-0 Valeur
                          %th.is_used.border-top-0 Utilisé ?
                          %th.position.border-top-0 Position
                      %tbody
                        %tr
                          %td.name Code complet
                          %td.is_used
                            - value = @organization.ibiza.piece_name_format['code']['is_used'] rescue false
                            = value ? t('yes_value') : t('no_value')
                          %td.position= @organization.ibiza.piece_name_format['code']['position'] rescue 1
                        %tr
                          %td.name Code dossier sans code cabinet
                          %td.is_used
                            - value = @organization.ibiza.piece_name_format['code_wp']['is_used'] rescue false
                            = value ? t('yes_value') : t('no_value')
                          %td.position= @organization.ibiza.piece_name_format['code_wp']['position'] rescue 1
                        %tr
                          %td.name Journal
                          %td.is_used
                            - value = @organization.ibiza.piece_name_format['journal']['is_used'] rescue false
                            = value ? t('yes_value') : t('no_value')
                          %td.position= @organization.ibiza.piece_name_format['journal']['position'] rescue 1
                        %tr
                          %td.name Période de traitement
                          %td.is_used
                            - value = @organization.ibiza.piece_name_format['period']['is_used'] rescue false
                            = value ? t('yes_value') : t('no_value')
                          %td.position= @organization.ibiza.piece_name_format['period']['position'] rescue 1
                        %tr
                          %td.name Numéro
                          %td.is_used
                            - value = @organization.ibiza.piece_name_format['number']['is_used'] rescue false
                            = value ? t('yes_value') : t('no_value')
                          %td.position= @organization.ibiza.piece_name_format['number']['position'] rescue 1
                        %tr
                          %td{ colspan: 3 }
                            %i
                              ( EXEMPLE:&nbsp;
                              %strong= IbizaLib::Api::Utils.piece_name('CAB%DOC AC 201901 001', @organization.ibiza.piece_name_format, @organization.ibiza.piece_name_format_sep)
                              &nbsp;)
                .card.margin1bottom
                  .card-header
                    %h4 Format de l'écriture comptable dans iBiza
                  .card-body
                    %table.table.table-condensed.table-striped
                      %thead
                        %tr.bg-brown.text-white
                          %th.name.border-top-0 Valeur
                          %th.is_used.border-top-0 Utilisé ?
                          %th.position.border-top-0 Position
                          %th.border-top-0
                      %tbody
                        %tr
                          %td.name Libellé de l'opération bancaire
                          %td.is_used= t('yes_value')
                          %td.position= @organization.ibiza.description['operation_label']['position'] rescue 1
                          %td Obligatoire pour une opération provenant d'un automate bancaire.
                        %tr
                          %td.name Date réelle
                          %td.is_used
                            - value = @organization.ibiza.description['date']['is_used'] rescue false
                            = value ? t('yes_value') : t('no_value')
                          %td.position= @organization.ibiza.description['date']['position'] rescue 1
                          %td
                        %tr
                          %td.name Tiers
                          %td.is_used
                            - value = @organization.ibiza.description['third_party']['is_used'] rescue false
                            = value ? t('yes_value') : t('no_value')
                          %td.position= @organization.ibiza.description['third_party']['position'] rescue 1
                          %td
                        %tr
                          %td.name Montant d'origine
                          %td.is_used
                            - value = @organization.ibiza.description['amount']['is_used'] rescue false
                            = value ? t('yes_value') : t('no_value')
                          %td.position= @organization.ibiza.description['amount']['position'] rescue 1
                          %td
                        %tr
                          %td.name Devise
                          %td.is_used
                            - value = @organization.ibiza.description['currency']['is_used'] rescue false
                            = value ? t('yes_value') : t('no_value')
                          %td.position= @organization.ibiza.description['currency']['position'] rescue 1
                          %td
                        %tr
                          %td.name Taux de conversion
                          %td.is_used
                            - value = @organization.ibiza.description['conversion_rate']['is_used'] rescue false
                            = value ? t('yes_value') : t('no_value')
                          %td.position= @organization.ibiza.description['conversion_rate']['position'] rescue 1
                          %td
                        %tr
                          %td.name Remarque
                          %td.is_used
                            - value = @organization.ibiza.description['observation']['is_used'] rescue false
                            = value ? t('yes_value') : t('no_value')
                          %td.position= @organization.ibiza.description['observation']['position'] rescue 1
                          %td
                        %tr
                          %td.name Journal
                          %td.is_used
                            - value = @organization.ibiza.description['journal']['is_used'] rescue false
                            = value ? t('yes_value') : t('no_value')
                          %td.position= @organization.ibiza.description['journal']['position'] rescue 1
                          %td
                        %tr
                          %td.name Nom de pièce (iDocus)
                          %td.is_used
                            - value = @organization.ibiza.description['piece_name']['is_used'] rescue false
                            = value ? t('yes_value') : t('no_value')
                          %td.position= @organization.ibiza.description['piece_name']['position'] rescue 1
                          %td
                        %tr
                          %td.name Numéro de pièce d'origine
                          %td.is_used
                            - value = @organization.ibiza.description['piece_number']['is_used'] rescue false
                            = value ? t('yes_value') : t('no_value')
                          %td.position= @organization.ibiza.description['piece_number']['position'] rescue 1
                          %td
                        %tr
                          %td{ colspan: 4 }
                            - preseizure = OpenStruct.new({ journal_name: 'AC', piece: OpenStruct.new(name: 'CAB%DOC AC 201901 001'), piece_number: 'FACT001', date: Time.new(2019,1,2), third_party: 'tiers' })
                            - preseizure['amount'] = '100,00'
                            - preseizure['currency'] = 'USD'
                            - preseizure['conversion_rate'] = 'Taux_Conv'
                            - preseizure['observation'] = 'remarque'
                            %i
                              ( EXEMPLE:&nbsp;
                              %strong= IbizaLib::Api::Utils.description(preseizure, @organization.ibiza.description, @organization.ibiza.description_separator)
                              &nbsp;)
                .card.margin1bottom
                  .card-header
                    %h4 Champ utilisé dans la colonne "Ref. pièce" et "Piece" dans Ibiza
                  .card-body
                    %table.table.table-condensed.table-striped
                      %thead
                        %tr.bg-brown.text-white
                          %th.name.border-top-0 Colonne
                          %th.is_used.border-top-0 Champ
                      %tbody
                        %tr
                          %td.name Ref. pièce
                          %td= @organization.ibiza.try(:voucher_ref_target) == 'piece_number' ? "Numéro de pièce d'origine" : "Nom de la pièce (iDocus)"
                        %tr
                          %td.name Pièce
                          %td= @organization.ibiza.try(:voucher_ref_target) != 'piece_number' ? "Numéro de pièce d'origine" : "Nom de la pièce (iDocus)"
              - if @user.leader?
                .alignright.mt-md-3
                  -if @organization.try(:ibiza).try(:used?)
                    = link_to 'Modifier les dossiers assignés', edit_software_users_account_organization_path(@organization, software: 'ibiza'), class: 'btn btn-secondary'
                  = link_to t('actions.edit'), edit_account_organization_ibiza_path(@organization), class: 'btn btn-primary'
            #coala.tab-pane.fade{ class: ('active show' if params[:tab] == 'coala') }
              .aligncenter
                %h4.margin1bottom Configuration Coala
              = simple_form_for [:account, @organization], html: { id: 'form_coala', class: 'form-horizontal label-auto' } do |f|
                = hidden_field_tag :part, 'coala'
                = f.simple_fields_for :coala_attributes do |sf|
                  %table.table.table-condensed.with_custom_controls
                    %tbody
                      %tr
                        %th= t('activerecord.models.software_coala.attributes.is_used')
                        %td{width: '40%'} Cette option permet de selectionner/utiliser Coala dans le paramétrage dossier client
                        %td{width: '5%'}= sf.input :is_used, as: 'boolean', label: 'oui?', input_html: { checked: @organization.try(:coala).try(:used?)}
                      %tr{ class: "#{@organization.try(:coala).try(:used?) ? '' : 'hide' }"}
                        %th= t('activerecord.models.software_coala.attributes.auto_deliver')
                        %td{width: '40%'} Cette option peut être écrasée dans le paramétrage dossier client
                        %td{width: '5%'}= sf.input :auto_deliver, as: 'boolean', label: 'oui?', input_html: { checked: @organization.try(:coala).try(:auto_deliver?)}
                - if @user.leader?
                  .alignright
                    -if @organization.try(:coala).try(:used?)
                      = link_to 'Modifier les dossiers assignés', edit_software_users_account_organization_path(@organization, software: 'coala'), class: 'btn btn-secondary'
                    = f.submit t('actions.submit'), class: 'btn btn-primary'
            #exact_online.tab-pane.fade{ class: ('active show' if params[:tab] == 'exact_online') }
              .aligncenter
                %h4.margin1bottom Configuration Exact Online
              = simple_form_for [:account, @organization], html: { id: 'form_exact_online', class: 'form-horizontal label-auto' } do |f|
                = hidden_field_tag :part, 'exact_online'
                = f.simple_fields_for :exact_online_attributes do |sf|
                  %table.table.table-condensed.with_custom_controls
                    %tbody
                      %tr
                        %th= t('activerecord.models.software_exact_online.attributes.is_used')
                        %td{width: '40%'} Cette option permet de selectionner/utiliser Exact Online dans le paramétrage dossier client <br> La liaison doit être paramètrée au niveau de chaque dossier (Configuration compte exact online).
                        %td{width: '5%'}= sf.input :is_used, as: 'boolean', label: 'oui?', input_html: { checked: @organization.try(:exact_online).try(:used?)}
                      %tr{ class: "#{@organization.try(:exact_online).try(:used?) ? '' : 'hide' }"}
                        %th= t('activerecord.models.software_exact_online.attributes.auto_deliver')
                        %td{width: '40%'} Cette option peut être écrasée dans le paramétrage dossier client.
                        %td{width: '5%'}= sf.input :auto_deliver, as: 'boolean', label: 'oui?', input_html: { checked: @organization.try(:exact_online).try(:auto_deliver?)}
                - if @user.leader?
                  .alignright
                    - if @organization.try(:exact_online).try(:used?)
                      = link_to 'Modifier les dossiers assignés', edit_software_users_account_organization_path(@organization, software: 'exact_online'), class: 'btn btn-secondary'
                    = f.submit t('actions.submit'), class: 'btn btn-primary'
            #my_unisoft.tab-pane.fade{ class: ('active show' if params[:tab] == 'my_unisoft') }
              .aligncenter
                %h4.margin1bottom Configuration My Unisoft
              = simple_form_for [:account, @organization], html: { id: 'form_my_unisoft', class: 'form-horizontal label-auto' } do |f|
                = hidden_field_tag :part, 'my_unisoft'
                = f.simple_fields_for :my_unisoft_attributes do |sf|
                  %table.table.table-condensed.with_custom_controls
                    %tbody
                      %tr
                        %th Utilise My Unisoft ?
                        %td{width: '40%'} Cette option permet de selectionner/utiliser My Unisoft dans le paramétrage dossier client <br> La liaison doit être paramètrée au niveau de chaque dossier (Configuration compte my unisoft).
                        %td{width: '5%'}= sf.input :is_used, as: 'boolean', label: 'oui?', input_html: { checked: @organization.try(:my_unisoft).try(:used?) }
                      %tr{ class: "#{@organization.try(:my_unisoft).try(:used?) ? '' : 'hide' }"}
                        %th Souhaitez-vous livrer automatiquement les écritures ?
                        %td{width: '40%'} Cette option peut être écrasée dans le paramétrage dossier client.
                        %td{width: '5%'}= sf.input :auto_deliver, as: 'boolean', label: 'oui?', input_html: { checked: @organization.try(:my_unisoft).try(:auto_deliver?)}
                - if @user.leader?
                  %br
                  .alignright
                    - if @organization.try(:my_unisoft).try(:used?)
                      = link_to 'Modifier les dossiers assignés', edit_software_users_account_organization_path(@organization, software: 'my_unisoft'), class: 'btn btn-secondary'
                    = f.submit t('actions.submit'), class: 'btn btn-primary'
            #quadratus.tab-pane.fade{ class: ('active show' if params[:tab] == 'quadratus') }
              .aligncenter
                %h4.margin1bottom Configuration Quadratus
              = simple_form_for [:account, @organization], html: { id: 'form_coala', class: 'form-horizontal label-auto' } do |f|
                = hidden_field_tag :part, 'quadratus'
                = f.simple_fields_for :quadratus_attributes do |sf|
                  %table.table.table-condensed.with_custom_controls
                    %tbody
                      %tr
                        %th= t('activerecord.models.software_quadratus.attributes.is_used')
                        %td{width: '40%'} Cette option permet de selectionner/utiliser Quadratus dans le paramétrage dossier client
                        %td{width: '5%'}= sf.input :is_used, as: 'boolean', label: 'oui?', input_html: { checked: @organization.try(:quadratus).try(:used?)}
                      %tr{ class: "#{@organization.try(:quadratus).try(:used?) ? '' : 'hide' }"}
                        %th= t('activerecord.models.software_quadratus.attributes.auto_deliver')
                        %td{width: '40%'} Cette option peut être écrasée dans le paramétrage dossier client
                        %td{width: '5%'}= sf.input :auto_deliver, as: :boolean, label: 'oui?', input_html: { checked: @organization.try(:quadratus).try(:auto_deliver?)}
                - if @user.leader?
                  .alignright
                    -if @organization.try(:quadratus).try(:used?)
                      = link_to 'Modifier les dossiers assignés', edit_software_users_account_organization_path(@organization, software: 'quadratus'), class: 'btn btn-secondary'
                    = f.submit t('actions.submit'), class: 'btn btn-primary'
            #cegid.tab-pane.fade{ class: ('active show' if params[:tab] == 'cegid') }
              .aligncenter
                %h4.margin1bottom Configuration Cegid
              = simple_form_for [:account, @organization], html: { id: 'form_cegid', class: 'form form-horizontal margin0' } do |f|
                = hidden_field_tag :part, 'cegid'
                = f.simple_fields_for :cegid_attributes do |sf|
                  %table.table.table-condensed.with_custom_controls
                    %tbody
                      %tr
                        %th= t('activerecord.models.software_cegid.attributes.is_used')
                        %td{width: '30%'} Cette option permet de selectionner/utiliser Cegid dans le paramétrage dossier client
                        %td{width: '5%'}= sf.input :is_used, as: :boolean, label: 'oui?', input_html: { checked: @organization.try(:cegid).try(:used?)}
                      %tr{ class: "#{@organization.try(:cegid).try(:used?) ? '' : 'hide' }"}
                        %th= t('activerecord.models.software_cegid.attributes.auto_deliver')
                        %td{width: '30%'} Cette option peut être écrasée dans le paramétrage dossier client
                        %td{width: '5%'}= sf.input :auto_deliver, as: :boolean, label: 'oui?', input_html: { checked: @organization.try(:cegid).try(:auto_deliver?)}
                - if @user.leader?
                  .alignright
                    -if @organization.try(:cegid).try(:used?)
                      = link_to 'Modifier les dossiers assignés', edit_software_users_account_organization_path(@organization, software: 'cegid'), class: 'btn btn-secondary'
                    = f.submit t('actions.submit'), class: 'btn btn-primary'
            #fec_agiris.tab-pane.fade{ class: ('active show' if params[:tab] == 'fec_agiris') }
              .aligncenter
                %h4.margin1bottom Configuration Fec Agiris
              = simple_form_for [:account, @organization], html: { id: 'form_fec_agiris', class: 'form form-horizontal margin0' } do |f|
                = hidden_field_tag :part, 'fec_agiris'
                = f.simple_fields_for :fec_agiris_attributes do |sf|
                  %table.table.table-condensed.with_custom_controls
                    %tbody
                      %tr
                        %th= t('activerecord.models.software_fec_agiris.attributes.is_used')
                        %td{width: '30%'} Cette option permet de selectionner/utiliser Fec Agiris dans le paramétrage dossier client
                        %td{width: '5%'}= sf.input :is_used, as: :boolean, label: 'oui?', input_html: { checked: @organization.try(:fec_agiris).try(:used?)}
                      %tr{ class: "#{@organization.try(:fec_agiris).try(:used?) ? '' : 'hide' }"}
                        %th= t('activerecord.models.software_fec_agiris.attributes.auto_deliver')
                        %td{width: '30%'} Cette option peut être écrasée dans le paramétrage dossier client
                        %td{width: '5%'}= sf.input :auto_deliver, as: :boolean, label: 'oui?', input_html: { checked: @organization.try(:fec_agiris).try(:auto_deliver?)}
                - if @user.leader?
                  .alignright
                    -if @organization.try(:fec_agiris).try(:used?)
                      = link_to 'Modifier les dossiers assignés', edit_software_users_account_organization_path(@organization, software: 'fec_agiris'), class: 'btn'
                    = f.submit t('actions.submit'), class: 'btn btn-primary'
            #csv_descriptor.tab-pane.fade{ class: ('active show' if params[:tab] == 'csv_descriptor'), :style => "line-height:25px" }
              .aligncenter
                %h4.margin1bottom Configuration d'export .csv
              = simple_form_for [:account, @organization], html: { id: 'form_csv_descriptor', class: 'form-horizontal label-auto' } do |f|
                = hidden_field_tag :part, 'csv_descriptor'
                = f.simple_fields_for :csv_descriptor_attributes do |sf|
                  %table.table.table-condensed.with_custom_controls
                    %tbody
                      %tr
                        %th= t('activerecord.models.software_csv_descriptor.attributes.is_used')
                        %td{width: '40%'} Cette option permet de selectionner/utiliser un format d'export personnalisé dans le paramétrage dossier client
                        %td{width: '5%'}= sf.input :is_used, as: :boolean, label: 'oui?', input_html: { checked: @organization.try(:csv_descriptor).try(:used?)}
                      %tr{ class: "#{@organization.try(:csv_descriptor).try(:used?) ? '' : 'hide' }"}
                        %th= t('activerecord.models.software_csv_descriptor.attributes.auto_deliver')
                        %td{width: '40%'} Cette option peut être écrasée dans le paramétrage dossier client
                        %td{width: '5%'}= sf.input :auto_deliver, as: :boolean, label: 'oui?', input_html: { checked: @organization.try(:csv_descriptor).try(:auto_deliver?)}
                - if @user.leader?
                  .alignright
                    -if @organization.try(:csv_descriptor).try(:used?)
                      = link_to 'Modifier les dossiers assignés', edit_software_users_account_organization_path(@organization, software: 'csv_descriptor'), class: 'btn btn-secondary'
                    = f.submit t('actions.submit'), class: 'btn btn-primary'
              -if @organization.try(:csv_descriptor).try(:used?) && @user.leader?
                %hr
                .row
                  .col-md-10
                    Créez un fichier d’export des écritures comptables en format .csv. Choisissez les différentes données que vous souhaitez récupérer en comptabilité.
                    %br
                    N.B.: ce fichier est nécessaire pour tous les outils comptables ne fonctionnant pas avec iDocus par API (Mode SaaS intégral).
                    %br
                  .col-md-2
                    - title = (@organization.try(:csv_descriptor).try(:directive).present?) ? 'Modifier le format' : 'Créer maintenant'
                    .alignright= link_to title, edit_account_organization_csv_descriptor_path(@organization), class: 'btn btn-primary'
            - if @user.leader?
              #payments.tab-pane{ class: ('active' if params[:tab] == 'payments') }
                = render :partial => '/account/organizations/slimpay_checkout'
                %h3.aligncenter Prélèvement
                %table.table.table-condensed.table-striped
                  %tbody
                    %tr
                      %th Etat :
                      %td#debit_state
                        - if @organization.try(:debit_mandate).try(:pending?)
                          %span.badge.fs-origin Non configuré
                        - elsif @organization.try(:debit_mandate).try(:started?)
                          %span.badge.fs-origin.badge-warning En attente utilisateur ...
                        - elsif @organization.try(:debit_mandate).try(:configured?)
                          %span.badge.fs-origin.badge-success OK
                        - else
                          %span.badge.fs-origin.badge-important Information non valide
                    %tr
                      %th Banque :
                      %td#debit_bic= @organization.try(:debit_mandate).try(:bic)
                    %tr
                      %th Nom :
                      %td#debit_name= @organization.try(:debit_mandate).try(:title).try(:capitalize).to_s + ' ' + @organization.try(:debit_mandate).try(:firstName).to_s + ' ' + @organization.try(:debit_mandate).try(:lastName).to_s
                    %tr
                      %th Email :
                      %td#debit_email= @organization.try(:debit_mandate).try(:email)
                %a#link_slimpay_checkout.btn.btn-primary{ href: '#slimpay_checkout', data: { toggle: :modal } } Configurer
                -if @user.is_admin
                  %a.btn.btn-danger{ href: revoke_payment_account_organization_path({ revoke_confirm: true }), data: { method: :post, confirm: 'Êtes vous sur?'}  } Revoquer le mandat
                %span#payment_configuration_checker.fs-origin.badge.badge-warning.hide
                  Verification de votre configuration en cours ... Veuillez patienter svp.

            - if @user.is_admin
              #file_sending_kit.tab-pane.fade{ class: ('active show' if params[:tab] == 'file_sending_kit') }
                %table.table.table-striped.table-condensed
                  %tr
                    %th= t('activerecord.models.file_sending_kit.attributes.folders')
                    %td
                      - if File.exist? File.join(Rails.root, 'files', 'kit', 'folders.pdf')
                        = link_to 'folders.pdf', folders_account_organization_file_sending_kit_path(@organization), target: '_blank'
                  %tr
                    %th= t('activerecord.models.file_sending_kit.attributes.mails')
                    %td
                      - if File.exist? File.join(Rails.root, 'files', 'kit', 'mails.pdf')
                        = link_to 'mails.pdf', mails_account_organization_file_sending_kit_path(@organization), target: '_blank'
                  %tr
                    %th= t('activerecord.models.file_sending_kit.attributes.customer_labels')
                    %td
                      - if File.exist? File.join(Rails.root, 'files', 'kit', 'customer_labels.pdf')
                        = link_to 'customer_labels.pdf', customer_labels_account_organization_file_sending_kit_path(@organization), target: '_blank'
                  %tr
                    %th= t('activerecord.models.file_sending_kit.attributes.workshop_labels')
                    %td
                      - if File.exist? File.join(Rails.root, 'files', 'kit', 'workshop_labels.pdf')
                        = link_to 'workshop_labels.pdf', workshop_labels_account_organization_file_sending_kit_path(@organization), target: '_blank'
                = link_to t('actions.edit'), edit_account_organization_file_sending_kit_path(@organization), class: 'btn btn-primary'
                = link_to 'Générer', select_account_organization_file_sending_kit_path(@organization), class: 'btn btn-primary'
            #reminder_emails.clearfix.tab-pane.fade{ class: ('active show' if params[:tab] == 'reminder_emails') }
              %p Configurez ici un nouvel e-mail de rappel qui sera envoyé à vos clients afin qu'ils n'oublient pas d'envoyer leurs documents.
              %table.table.table-striped.table-condensed
                %thead
                  %tr.bg-brown.text-white
                    %th= t('activerecord.models.reminder_email.attributes.name')
                    %th= t('activerecord.models.reminder_email.attributes.delivery_day')
                    %th= t('activerecord.models.reminder_email.attributes.delivered_at')
                    %th= t('activerecord.models.reminder_email.attributes.summarize')
                    %th= t('actions.name')
                %tbody
                  - @organization.reminder_emails.each do |reminder_email|
                    %tr
                      %td= reminder_email.name
                      %td
                        = reminder_email.delivery_day
                        = "(#{period_type reminder_email.period})"
                      %td= l(reminder_email.delivered_at) rescue ''
                      %td
                        = reminder_email.delivered_users.count
                        \/
                        = reminder_email.processed_users.count
                        \/
                        - if reminder_email.delivered_at
                          = @organization.customers.where("created_at <= ?", reminder_email.delivered_at).where("inactive_at IS NULL OR inactive_at > ?", reminder_email.delivered_at).count
                        - else
                          = @organization.customers.active.count
                      %td
                        = link_to glyphicon('plus'), new_account_organization_reminder_email_path(@organization, template: reminder_email), class: 'btn btn-light', title: 'Configurer un nouveau e-mail de rappel en se basant sur cet e-mail'
                        = link_to glyphicon('eye'), account_organization_reminder_email_path(@organization, reminder_email), class: 'btn btn-light', target: :_blank, title: "Voir"
                        = link_to glyphicon('pencil'), edit_account_organization_reminder_email_path(@organization, reminder_email), class: 'btn btn-light', title: 'Editer'
                        = link_to glyphicon('x'), account_organization_reminder_email_path(@organization, reminder_email), class: 'btn btn-light', method: :delete, data: { confirm: t('actions.confirm') }, title: 'Supprimer'
                        = link_to glyphicon('envelope-open'), deliver_account_organization_reminder_email_path(@organization, reminder_email), class: 'btn btn-light', data: { confirm: t('activerecord.models.reminder_email.actions.send_confirmation') }, method: :post, title: 'Envoyer'
              = link_to t('actions.new'), new_account_organization_reminder_email_path(@organization), class: 'btn btn-primary'
            #subscription.tab-pane.fade{ class: ('active show' if params[:tab] == 'subscription') }
              %table.table.table-striped.table-condensed
                %tr
                  %th Option
                  %th Choix
                  %th.price Prix HT
                  %th.price Prix TTC
                %tr
                  %td Clients
                  %td= @organization.customers.active_at(Time.now).count
                  %td.price= format_price_00(@total - @subscription.current_period.products_price_in_cents_wo_vat) + ' €'
                  %td.price= format_price_00((@total * @subscription.tva_ratio) - @subscription.current_period.products_price_in_cents_w_vat) + ' €'
                - @subscription_options.each do |option|
                  %tr
                    %td Autres
                    %td= option.name
                    %td.price= format_price_00(option.price_in_cents_wo_vat) + ' €'
                    %td.price= format_price_00(option.price_in_cents_w_vat) + ' €'
                %tr
                  %td
                  %th Total
                  %td.price= format_price_00(@total) + ' €'
                  %td.price= format_price_00(@total * @subscription.tva_ratio) + ' €'
                %tr
                  %td
                  %th TVA (20 %)
                  %td
                  %td.price= format_price_00((@total * @subscription.tva_ratio) - @total) + ' €'
              = link_to t('actions.edit'), edit_account_organization_organization_subscription_path(@organization), class: 'btn btn-primary'
              = link_to 'Propager les quotas', select_options_account_organization_organization_subscription_path(@organization), class: 'btn btn-primary'